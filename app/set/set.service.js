"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var card_model_1 = require("~/set/card.model");
var SetService = /** @class */ (function () {
    function SetService() {
        this.onTable = new Array();
        this.onStaple = new Array();
        this.setFound = new Array();
        this.setNotFound = new Array();
        this.setSetSelected = new Array();
        this.setFoundSetStaple = new Array();
        this.startGame();
    }
    SetService.prototype.newCardsAfterSetFound = function () {
        var _this = this;
        this.setFound.forEach(function (card) {
            var cardNr = _this.onTable.indexOf(card);
            var cardInSet = _this.onTable[cardNr];
            _this.setFoundSetStaple.push(cardInSet);
            if (_this.onStaple.length > 0 && _this.onTable.length <= 12) {
                _this.onTable[cardNr] = _this.onStaple.pop();
            }
            else {
                _this.onTable.splice(cardNr, 1);
            }
        });
        this.setFound.length = 0;
    };
    SetService.prototype.startGame = function () {
        this.onStaple.length = 0;
        this.onTable.length = 0;
        this.createStaple();
        this.setOnTable();
    };
    SetService.prototype.randomNr = function (cards) {
        return Math.floor(Math.random() * cards);
    };
    SetService.prototype.createStaple = function () {
        var orderedStaple = new Array();
        for (var nr = 1; nr <= 3; nr++) {
            for (var color = 1; color <= 3; color++) {
                for (var shape = 1; shape <= 3; shape++) {
                    for (var filling = 1; filling <= 3; filling++) {
                        orderedStaple.push(new card_model_1.CardModel(color, nr, shape, filling));
                    }
                }
            }
        }
        // shake the staple
        for (var nr = 81; nr >= 1; nr--) {
            var cardNr = this.randomNr(nr);
            this.onStaple.push(orderedStaple[cardNr]);
            orderedStaple.splice(cardNr, 1);
        }
    };
    SetService.prototype.setOnTable = function () {
        for (var nr = 1; nr <= 12; nr++) {
            this.onTable.push(this.onStaple.pop());
        }
    };
    SetService.prototype.addCardOnTable = function () {
        if (this.onStaple.length > 0 && !this.isThereSet()) {
            this.onTable.push(this.onStaple.pop());
        }
    };
    SetService.prototype.getProperty = function (nr1, nr2) {
        if ((nr1 === 1 && nr2 === 2) || (nr1 === 2 && nr2 === 1)) {
            return 3;
        }
        if ((nr1 === 3 && nr2 === 2) || (nr1 === 2 && nr2 === 3)) {
            return 1;
        }
        return 2;
    };
    SetService.prototype.createThirdCard = function (card1, card2) {
        var nr = card1.number === card2.number ? card2.number : this.getProperty(card1.number, card2.number);
        var color = card1.color === card2.color ? card2.color : this.getProperty(card1.color, card2.color);
        var shape = card1.shape === card2.shape ? card2.shape : this.getProperty(card1.shape, card2.shape);
        var filling = card1.filling === card2.filling ? card2.filling : this.getProperty(card1.filling, card2.filling);
        return new card_model_1.CardModel(color, nr, shape, filling);
    };
    SetService.prototype.findCard = function (card) {
        var nrOfCards = this.onTable.length;
        for (var cardNr = 0; cardNr < nrOfCards; cardNr++) {
            if (card.filename === this.onTable[cardNr].filename) {
                return this.onTable[cardNr];
            }
        }
        return null;
    };
    SetService.prototype.checkSetOnTable = function () {
        this.setFound.length = 0;
        this.setSetSelected.length = 0;
        var card1 = null;
        var card2 = null;
        var card3 = null;
        var nrOfCards = this.onTable.length;
        for (var cardNr = 0; cardNr < nrOfCards; cardNr++) {
            var card = this.onTable[cardNr];
            if (card.selected) {
                if (card1 === null) {
                    card1 = card;
                }
                else if (card2 === null) {
                    card2 = card;
                }
                else if (card3 === null) {
                    card3 = card;
                }
            }
        }
        if (card1 && card2 && card3) {
            if (this.checkSet(card1, card2, card3)) {
                card1.isInSet = true;
                card2.isInSet = true;
                card3.isInSet = true;
                this.setFound.push(card1);
                this.setFound.push(card2);
                this.setFound.push(card3);
            }
            else {
                card1.isNotSet = true;
                card2.isNotSet = true;
                card3.isNotSet = true;
            }
            this.setSetSelected.push(card1);
            this.setSetSelected.push(card2);
            this.setSetSelected.push(card3);
        }
    };
    SetService.prototype.checkSet = function (card1, card2, card3) {
        var cardThird = this.createThirdCard(card1, card2);
        return card3.filename === cardThird.filename;
    };
    SetService.prototype.isThereSet = function () {
        this.setFound.length = 0;
        this.card3 = null;
        this.onTable.forEach(function (card) { return card.setSelected(false); });
        var nrOfCards = this.onTable.length;
        for (var cardNr = 0; cardNr < nrOfCards; cardNr++) {
            this.card1 = this.onTable[cardNr];
            for (var cardNextNr = cardNr + 1; cardNextNr < nrOfCards; cardNextNr++) {
                this.card2 = this.onTable[cardNextNr];
                this.card3 = this.findCard(this.createThirdCard(this.card1, this.card2));
                if (this.card3) {
                    return true;
                }
            }
        }
        return false;
    };
    SetService.prototype.findSet = function () {
        if (this.isThereSet()) {
            this.card1.isInSet = this.card1.selected = true;
            this.card2.isInSet = this.card2.selected = true;
            this.card3.isInSet = this.card3.selected = true;
            this.setFound.push(this.card1);
            this.setFound.push(this.card2);
            this.setFound.push(this.card3);
        }
    };
    SetService.prototype.threeCardsSelected = function () {
        var countNrSelected = 0;
        this.onTable.forEach(function (card) {
            if (card.selected) {
                countNrSelected++;
            }
        });
        return countNrSelected === 3;
    };
    SetService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], SetService);
    return SetService;
}());
exports.SetService = SetService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQywrQ0FBNkM7QUFHN0M7SUFhSTtRQVhPLFlBQU8sR0FBRyxJQUFJLEtBQUssRUFBYSxDQUFDO1FBQ2pDLGFBQVEsR0FBRyxJQUFJLEtBQUssRUFBYSxDQUFDO1FBQ2xDLGFBQVEsR0FBRyxJQUFJLEtBQUssRUFBYSxDQUFDO1FBQ2xDLGdCQUFXLEdBQUcsSUFBSSxLQUFLLEVBQWEsQ0FBQztRQUNyQyxtQkFBYyxHQUFHLElBQUksS0FBSyxFQUFhLENBQUM7UUFDeEMsc0JBQWlCLEdBQUcsSUFBSSxLQUFLLEVBQWEsQ0FBQztRQU85QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLDBDQUFxQixHQUE1QjtRQUFBLGlCQWFDO1FBWkcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1lBQ3RCLElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFDLElBQU0sU0FBUyxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkMsS0FBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUV2QyxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9DLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixLQUFJLENBQUMsT0FBTyxDQUFDLE1B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QUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNyQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDaEIsZUFBZSxFQUFFLENBQUM7WUFDdEIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLGVBQWUsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQXRMUSxVQUFVO1FBRHRCLGlCQUFVLEVBQUU7O09BQ0EsVUFBVSxDQXdMdEI7SUFBRCxpQkFBQztDQUFBLEFBeExELElBd0xDO0FBeExZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZE1vZGVsIH0gZnJvbSBcIn4vc2V0L2NhcmQubW9kZWxcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNldFNlcnZpY2Uge1xuXG4gICAgcHVibGljIG9uVGFibGUgPSBuZXcgQXJyYXk8Q2FyZE1vZGVsPigpO1xuICAgIHB1YmxpYyBvblN0YXBsZSA9IG5ldyBBcnJheTxDYXJkTW9kZWw+KCk7XG4gICAgcHVibGljIHNldEZvdW5kID0gbmV3IEFycmF5PENhcmRNb2RlbD4oKTtcbiAgICBwdWJsaWMgc2V0Tm90Rm91bmQgPSBuZXcgQXJyYXk8Q2FyZE1vZGVsPigpO1xuICAgIHB1YmxpYyBzZXRTZXRTZWxlY3RlZCA9IG5ldyBBcnJheTxDYXJkTW9kZWw+KCk7XG4gICAgcHVibGljIHNldEZvdW5kU2V0U3RhcGxlID0gbmV3IEFycmF5PENhcmRNb2RlbD4oKTtcblxuICAgIHByaXZhdGUgY2FyZDE6IENhcmRNb2RlbDtcbiAgICBwcml2YXRlIGNhcmQyOiBDYXJkTW9kZWw7XG4gICAgcHJpdmF0ZSBjYXJkMzogQ2FyZE1vZGVsO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0YXJ0R2FtZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZXdDYXJkc0FmdGVyU2V0Rm91bmQoKSB7XG4gICAgICAgIHRoaXMuc2V0Rm91bmQuZm9yRWFjaChjYXJkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhcmROciA9IHRoaXMub25UYWJsZS5pbmRleE9mKGNhcmQpO1xuICAgICAgICAgICAgY29uc3QgY2FyZEluU2V0ID0gdGhpcy5vblRhYmxlW2NhcmROcl07XG4gICAgICAgICAgICB0aGlzLnNldEZvdW5kU2V0U3RhcGxlLnB1c2goY2FyZEluU2V0KTtcbiAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMub25TdGFwbGUubGVuZ3RoID4gMCAmJiB0aGlzLm9uVGFibGUubGVuZ3RoIDw9IDEyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblRhYmxlW2NhcmROcl0gPSB0aGlzLm9uU3RhcGxlLnBvcCgpOyAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25UYWJsZS5zcGxpY2UoY2FyZE5yLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0Rm91bmQubGVuZ3RoPTA7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXJ0R2FtZSgpIHtcbiAgICAgICAgdGhpcy5vblN0YXBsZS5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLm9uVGFibGUubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5jcmVhdGVTdGFwbGUoKTtcbiAgICAgICAgdGhpcy5zZXRPblRhYmxlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByYW5kb21OcihjYXJkczpudW1iZXIpOm51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjYXJkcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVTdGFwbGUoKSB7XG4gICAgICAgIHZhciBvcmRlcmVkU3RhcGxlID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvciAodmFyIG5yPTE7bnI8PTM7bnIrKyl7XG4gICAgICAgICAgICBmb3IgKHZhciBjb2xvcj0xO2NvbG9yPD0zO2NvbG9yKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaGFwZT0xO3NoYXBlPD0zO3NoYXBlKyspe1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmaWxsaW5nPTE7ZmlsbGluZzw9MztmaWxsaW5nKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZFN0YXBsZS5wdXNoKG5ldyBDYXJkTW9kZWwoY29sb3IsbnIsc2hhcGUsZmlsbGluZykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNoYWtlIHRoZSBzdGFwbGVcbiAgICAgICAgZm9yICh2YXIgbnI9ODE7bnI+PTE7bnItLSkge1xuICAgICAgICAgICAgY29uc3QgY2FyZE5yID0gdGhpcy5yYW5kb21Ocihucik7XG4gICAgICAgICAgICB0aGlzLm9uU3RhcGxlLnB1c2gob3JkZXJlZFN0YXBsZVtjYXJkTnJdKTtcbiAgICAgICAgICAgIG9yZGVyZWRTdGFwbGUuc3BsaWNlKGNhcmROciwxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRPblRhYmxlKCkge1xuICAgICAgIGZvciAodmFyIG5yPTE7bnI8PTEyO25yKyspIHtcbiAgICAgICAgIHRoaXMub25UYWJsZS5wdXNoKHRoaXMub25TdGFwbGUucG9wKCkpO1xuICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQ2FyZE9uVGFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm9uU3RhcGxlLmxlbmd0aCA+IDAgJiYgIXRoaXMuaXNUaGVyZVNldCgpKSB7XG4gICAgICAgICAgICB0aGlzLm9uVGFibGUucHVzaCh0aGlzLm9uU3RhcGxlLnBvcCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UHJvcGVydHkobnIxOiBOdW1iZXIsIG5yMjogTnVtYmVyKSB7XG4gICAgICAgIGlmICgobnIxID09PSAxICYmIG5yMiA9PT0gMikgfHwgKG5yMSA9PT0gMiAmJiBucjIgPT09IDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG5yMSA9PT0gMyAmJiBucjIgPT09IDIpIHx8IChucjEgPT09IDIgJiYgbnIyID09PSAzKSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVUaGlyZENhcmQoY2FyZDE6Q2FyZE1vZGVsLCBjYXJkMjpDYXJkTW9kZWwpIHtcbiAgICAgICAgY29uc3QgbnIgPSBjYXJkMS5udW1iZXIgPT09IGNhcmQyLm51bWJlcj8gY2FyZDIubnVtYmVyOiB0aGlzLmdldFByb3BlcnR5KGNhcmQxLm51bWJlciwgY2FyZDIubnVtYmVyKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjYXJkMS5jb2xvciA9PT0gY2FyZDIuY29sb3I/IGNhcmQyLmNvbG9yOiB0aGlzLmdldFByb3BlcnR5KGNhcmQxLmNvbG9yLCBjYXJkMi5jb2xvcik7XG4gICAgICAgIGNvbnN0IHNoYXBlID0gY2FyZDEuc2hhcGUgPT09IGNhcmQyLnNoYXBlPyBjYXJkMi5zaGFwZTogdGhpcy5nZXRQcm9wZXJ0eShjYXJkMS5zaGFwZSwgY2FyZDIuc2hhcGUpO1xuICAgICAgICBjb25zdCBmaWxsaW5nID0gY2FyZDEuZmlsbGluZyA9PT0gY2FyZDIuZmlsbGluZz8gY2FyZDIuZmlsbGluZzogdGhpcy5nZXRQcm9wZXJ0eShjYXJkMS5maWxsaW5nLCBjYXJkMi5maWxsaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDYXJkTW9kZWwoY29sb3IsIG5yLCBzaGFwZSwgZmlsbGluZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaW5kQ2FyZChjYXJkOiBDYXJkTW9kZWwpOiBDYXJkTW9kZWwge1xuICAgICAgICBjb25zdCBuck9mQ2FyZHMgPSB0aGlzLm9uVGFibGUubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBjYXJkTnI9MDsgY2FyZE5yPG5yT2ZDYXJkczsgY2FyZE5yKyspIHtcbiAgICAgICAgICAgIGlmIChjYXJkLmZpbGVuYW1lID09PSB0aGlzLm9uVGFibGVbY2FyZE5yXS5maWxlbmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uVGFibGVbY2FyZE5yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hlY2tTZXRPblRhYmxlKCkge1xuICAgICAgICB0aGlzLnNldEZvdW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuc2V0U2V0U2VsZWN0ZWQubGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIGNhcmQxOiBDYXJkTW9kZWwgPSBudWxsOyBcbiAgICAgICAgdmFyIGNhcmQyOiBDYXJkTW9kZWwgPSBudWxsO1xuICAgICAgICB2YXIgY2FyZDM6IENhcmRNb2RlbCA9IG51bGw7XG4gICAgICAgIGNvbnN0IG5yT2ZDYXJkcyA9IHRoaXMub25UYWJsZS5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGNhcmROcj0wOyBjYXJkTnI8bnJPZkNhcmRzOyBjYXJkTnIrKykge1xuICAgICAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMub25UYWJsZVtjYXJkTnJdO1xuICAgICAgICAgICAgaWYgKGNhcmQuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FyZDEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZDEgPSBjYXJkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FyZDIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZDIgPSBjYXJkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FyZDMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZDMgPSBjYXJkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FyZDEgJiYgY2FyZDIgJiYgY2FyZDMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrU2V0KGNhcmQxLCBjYXJkMiwgY2FyZDMpKSB7XG4gICAgICAgICAgICAgICAgY2FyZDEuaXNJblNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FyZDIuaXNJblNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FyZDMuaXNJblNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGb3VuZC5wdXNoKGNhcmQxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZvdW5kLnB1c2goY2FyZDIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Rm91bmQucHVzaChjYXJkMyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhcmQxLmlzTm90U2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYXJkMi5pc05vdFNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FyZDMuaXNOb3RTZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTZXRTZWxlY3RlZC5wdXNoKGNhcmQxKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U2V0U2VsZWN0ZWQucHVzaChjYXJkMik7XG4gICAgICAgICAgICB0aGlzLnNldFNldFNlbGVjdGVkLnB1c2goY2FyZDMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrU2V0KGNhcmQxOkNhcmRNb2RlbCwgY2FyZDI6Q2FyZE1vZGVsLCBjYXJkMzogQ2FyZE1vZGVsKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGNhcmRUaGlyZCA9IHRoaXMuY3JlYXRlVGhpcmRDYXJkKGNhcmQxLCBjYXJkMik7XG4gICAgICAgIHJldHVybiBjYXJkMy5maWxlbmFtZSA9PT0gY2FyZFRoaXJkLmZpbGVuYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc1RoZXJlU2V0KCk6IGJvb2xlYW4ge1xuICAgICAgICB0aGlzLnNldEZvdW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuY2FyZDMgPSBudWxsO1xuICAgICAgICB0aGlzLm9uVGFibGUuZm9yRWFjaChjYXJkID0+IGNhcmQuc2V0U2VsZWN0ZWQoZmFsc2UpKTtcbiAgICAgICAgY29uc3QgbnJPZkNhcmRzID0gdGhpcy5vblRhYmxlLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgY2FyZE5yPTA7IGNhcmROcjxuck9mQ2FyZHM7IGNhcmROcisrKSB7XG4gICAgICAgICAgICB0aGlzLmNhcmQxID0gdGhpcy5vblRhYmxlW2NhcmROcl07XG4gICAgICAgICAgICBmb3IgKHZhciBjYXJkTmV4dE5yPWNhcmROcisxOyBjYXJkTmV4dE5yPG5yT2ZDYXJkczsgY2FyZE5leHROcisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJkMiA9IHRoaXMub25UYWJsZVtjYXJkTmV4dE5yXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQzID0gdGhpcy5maW5kQ2FyZCh0aGlzLmNyZWF0ZVRoaXJkQ2FyZCh0aGlzLmNhcmQxLCB0aGlzLmNhcmQyKSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FyZDMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9ICBcbiAgICAgICAgcmV0dXJuIGZhbHNlOyBcbiAgICB9XG5cbiAgICBwdWJsaWMgZmluZFNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUaGVyZVNldCgpKSB7XG4gICAgICAgICAgICB0aGlzLmNhcmQxLmlzSW5TZXQgPSB0aGlzLmNhcmQxLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2FyZDIuaXNJblNldCA9IHRoaXMuY2FyZDIuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jYXJkMy5pc0luU2V0ID0gdGhpcy5jYXJkMy5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNldEZvdW5kLnB1c2godGhpcy5jYXJkMSk7XG4gICAgICAgICAgICB0aGlzLnNldEZvdW5kLnB1c2godGhpcy5jYXJkMik7XG4gICAgICAgICAgICB0aGlzLnNldEZvdW5kLnB1c2godGhpcy5jYXJkMyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdGhyZWVDYXJkc1NlbGVjdGVkKCk6Ym9vbGVhbiB7XG4gICAgICAgIHZhciBjb3VudE5yU2VsZWN0ZWQgPSAwO1xuICAgICAgICB0aGlzLm9uVGFibGUuZm9yRWFjaChjYXJkID0+IHtcbiAgICAgICAgICAgIGlmIChjYXJkLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY291bnROclNlbGVjdGVkKys7ICAgXG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50TnJTZWxlY3RlZCA9PT0gMztcbiAgICB9XG4gICAgIFxufSJdfQ==